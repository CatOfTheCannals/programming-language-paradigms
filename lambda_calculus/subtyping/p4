                                                                            SUBTIPADO

1)

a) Dar una derivación que pruebe que {x : Nat, y : Nat, z : Nat} <: {y : Nat}. ¿Es única?

                                           
{y} ⊆ {x, y, z}    Nat<:Nat
________________________________________(S-Rcd)
{x : Nat, y : Nat, z : Nat} <: {y : Nat}



Otra forma

Pruebo que vale {x : Nat, y : Nat, z : Nat} <: {y : Nat,x : Nat, z : Nat}

{x : Nat, y : Nat, z : Nat} es permutación de {y : Nat, x : Nat, z : Nat}
_________________________________________________________________________(S-RcdPerm)
{x : Nat, y : Nat, z : Nat} <: {y : Nat, x : Nat, z : Nat}

Y ahora veo que vale {y : Nat,x : Nat, z : Nat} <: {y : Nat}


_______________________________________(S-RcdWidth)
{y : Nat, x : Nat, z : Nat} <: {y : Nat}

Luego, por transitividad vale que {x : Nat, y : Nat, z : Nat} <: {y : Nat}


b) Dar al menos dos derivaciones de {x : Nat, y : Nat} <: {}


_______________________(S-RcdWidth)
{x : Nat, y : Nat} <: {}

                                          _______________________(S-RcdWidth)
{x : Nat, y : Nat} <: {y : Nat, x : Nat}  {y : Nat, x : Nat} <: {} 
_____________________________________________________________________________(S-RcdPerm) => PREGUNTA: esto es re trucho ☹️
{x : Nat, y : Nat} <: {}



2) Asumiendo que tenemos los tipos básicos, Top, funciones y registros (sin referencias ni otras extensiones)...

a) ¿Cuáles son los tipos que tienen infinitos subtipos?

Cualquier tipo registro tiene un subtipo que resulta de agregarle un campo extra. Por lo tanto, cualquier tipo registro tiene infinitos subtipos.
Cualquier tipo es subtipo del tipo Top. En particular, el tipo registro es subtipo de Top. Por lo tanto, Top también tiene infinitos subtipos.
Las funciones que tienen codominios de tipo Top o tipo registro, también tienen infinitos subtipos (ya que el codominio puede subtiparse infinitamente).


b) ¿Cuáles son los tipos que tienen infinitos supertipos?

Las funciones que tienen dominos de tipo Top o tipo registro, tienen infinitos supertipos (ya que el dominio puede subtiparse infinitamente).


3)

a) ¿Es verdad que ∃S ∀T T <: S? Verdadero. Top es supertipo de todos los tipos.

b) ¿Es verdad que ∃S ∀T S <: T ? Falso. No hay un subtipo en común para todos los tipos.

Demostración.

Supongo que vale la proposición. Luego tendría que darse que exista S tal que S <: Bool y, por ejemplo, S <: {}. Pero si S <: Bool => S = Bool y Bool no subtipa {}. ABSURDO

c) ¿Es verdad que ∃S1, S2 ∀T1, T2 S1 → S2 <: T1 → T2? Falso.

T1 <: S1  S2 <: T2            ________________________________________________________________________________________________________________________________________________________________
__________________(S-Func) =>|IDEA: T1 = Bool y T2 = Bool => S1 está en {Bool, Nat, Int, Float} y S2 = Bool. Por otro lado, T1 = Bool y T2 = {} => S1 está en {Bool, Nat, Int, Float} y S2 es |
S1 → S2 <: T1 → T2           |                                                                                                                      algún registro que extiende {}            |
                             |                               No se puede encontrar un subtipo en común entre estos dos tipos.                                                                 |
                             |________________________________________________________________________________________________________________________________________________________________|

Si se diera esto, entones tendría que existir S1 para todo T1 tal que T1 <: S1. Esto vale tomando S1 como Top.
Por otro lado, tendría que darse que exista S2 para todo T2 tal que S2 <: T2. Esto es falso por b).

Luego no vale la proposición.

d) ¿Es verdad que ∃S1, S2 ∀T1, T2 T1 → T2 <: S1 → S2? 

S1 <: T1  T2 <: S2
__________________(S-Func)
T1 → T2 <: S1 → S2

Para que se cumpla esto, tiene que existir S1 para todo T1 tal que S1 <: T1, esto es falso por b).

Luego no vale la proposición.



4) Decidir si cada uno de los siguientes enunciados es verdadero o falso. Si es verdadero demostrarlo y si es falso dar un contraejemplo.

a) T <: S si y sólo si existe un A tal que S → T <: A → A.

Demostración.

=>)

Si T <: S entonces tomando A = T quiero ver que S → T <: T → T.

Vale por hipótesis      Vale
__________________      _______
T <: S                  T <: T
_______________________________________(S-Func)
S → T  <:  A → A


<=)

Si existe A tal que S → T <: A → A, entonces vale lo siguiente:

A <: S  T <: A
________________(S-Func)
S → T  <:  A → A

Luego por transitividad de <:, T <: S.



b) {x: S, y : T} siempre tiene menos supertipos que S → T.

S' <: S  T <: T'
__________________(S-Func) => IDEA: Quiero que S' y T' sean únicos.
S → T <: S' → T'

Tomando S = Bool y T = Float vale que si S' <: S => S' = Bool y si T <: T' => T' = Float. Entonces el único supertipo de Bool → Float es Bool → Float.

Por otro lado, {x : Bool, y : Float} tiene como supertipos {x : Bool} y {} (entre otros). 

Luego es falsa la proposición.



c) {x: S, y : T} nunca tiene menos supertipos que S → T.

S' <: S  T <: T'
__________________(S-Func) => IDEA: Quiero que S' o T' sean infinitos.
S → T <: S' → T'

Tomando S = Top y T = Float vale que si S' <: S => S' es cualquier tipo y si T <: T' => T' = Float. Entonces Top → Float tiene infinitos supertipos.

Por otro lado {x : Top, y : Float}

{li | i ∈ 1..n} ⊆ {x : Top, y : Float}      kj = li ⇒ σj<:τi donde σj es el tipo de kj en {x : Top, y : Float} 
______________________________________________________________________________________________________________(S-Rcd)
{x : Top, y : Float} <: {li : τi | i ∈ 1..n}

Entonces {li : τi | i ∈ 1..n} = {y : T', x : S'}|{x : S', y : T'}|{x : S'}|{y : T'}|{}. Entonces resta por ver qué tipos pueden ser S' y T'.

Si Top <: S' => S' = Top.

Si Float <: T' => T' = Float.

Luego, el conjunto de supertipos de {x : Top, y : Float} es {{y : Float, x : Top}, {x : Top, y : Float}, {x : Top}, {y : Float}, {}}.

Por lo tanto es falsa la proposición.



5) Exhibir tipos R, S y T tales que R <: S y R <: T pero no exista una relación de subtipado entre S y T.

R = {x : {}, y : Bool}

S = {x : {}}

T = {y : Bool}

R <: T y R <: S por S-Rcd pero no hay regla que permita establecer una relación de subtipado entre S y T (ya sea S <: T o T <: S)



6) Supongamos que sólo podemos construir tipos con Bool, Nat y funciones (sin registros). Demostrar que para todo tipo S construido de esa manera, la cantidad de subtipos y de supertipos de S es finita.

Demostración.

S no es tipo función.


Entonces S está en {Bool, Nat}. Si S = Bool y se tiene S' tal que S <: S', entonces S' está en {Bool, Nat, Int, Float}. Si S = Nat, entonces S' está en {Nat, Int, Float}. De forma análoga, los subtipos están en {Bool} y {Bool, Nat} respectivamente.


S tipo función.
 

Por inducción en la complejidad del término de tipo (un término M es más complejo que uno N si hay más apariciones de → en M que en en N). 

Los casos base son los del paso anterior. 

Dados M y N tales que vale la hipótesis inductiva, quiero ver que también se cumple para M → N.

Supertipos.

M' <: M  N <: N'
__________________(S-Func)
M → N <: M' → N'

La cantidad de supertipos M' → N' está dada por #_supertipos(N)*#_subtipos(M) y esto es finito por hipótesis inductiva. 

Subtipos.

M <: M'  N' <: N
__________________(S-Func)
M' → N' <: M → N

De forma análoga, la cantidad de subtipos M' → N' está dada por #_supertipos(M)*#_subtipos(N) y esto es finito por hipótesis inductiva. 




                                                                            SUBTIPADO EN EL CONTEXTO DE TIPADO

7) Probar que los siguientes términos tipan si se tienen en cuenta las reglas de subtipado vistas en clase.


a) λx: Bool.(λy : Nat.succ(y)) x

y : Nat ∈ Γ ∪ {x : Bool} ∪ {y : Nat}
____________________________________(T-Var)
Γ ∪ {x : Bool} ∪ {y : Nat} > y : Nat                                   x : Bool ∈ Γ ∪ {x : Bool}
___________________________________________(T-Succ) => σ = Nat         _________________________(T-Var) ___________(S-BoolNat)
Γ ∪ {x : Bool} ∪ {y : Nat} > succ(y) : σ                               Γ ∪ {x : Bool} > x : Bool        Bool <: Nat
_______________________________________________________________(T-Abs) _______________________________________________________(S-Sub)
Γ ∪ {x : Bool} > λy : Nat.succ(y) : Nat → σ                            Γ ∪ {x : Bool} > x : Nat
_____________________________________________________________________________________________________________________________________(T-App)
Γ ∪ {x : Bool} > (λy : Nat.succ(y)) x : σ
_____________________________________________________________________________________________________________________________________________(T-Abs)
Γ > λx: Bool.(λy : Nat.succ(y)) x : Bool → σ


b) (λr : {l1 : Bool, l2 : Float}.if r.l1 then r.l2 else 5,5) {l1 = true, l2 = −8, l3 = 9,0}


                                                                      No hay una regla para aplicar
Γ' > r : C  l1 : Bool ∈ C          Γ' > r : C  l2 : Float ∈ C         pero debería funcionar (*)
_________________________(T-Proj)  __________________________(T-Proj) ________________(???)
Γ' > r.l1 : Bool                   Γ' > r.l2 : Float                  Γ' > 5,5 : Float
___________________________________________________________________________________________(T-If)           
Γ' > if r.l1 then r.l2 else 5,5 : Float                                                                     
_________________________________________________________________________________________________(T-Abs)    
Γ > λr : {l1 : Bool, l2 : Float}.if r.l1 then r.l2 else 5,5 : {l1 : Bool, l2 : Float} → Float               (1)
______________________________________________________________________________________________________________________________________________________________________________________(T-App)
Γ > (λr : {l1 : Bool, l2 : Float}.if r.l1 then r.l2 else 5,5) {l1 = true, l2 = −8, l3 = 9,0} : Float

Γ' = Γ ∪ {r : {l1 : Bool, l2 : Float}}
C = {l1 : Bool, l2 : Float}

    
(1)
                       Idem (*)
                       ____________(???) ____________(T-IntFloat)
                       Γ > -8 : Int      Int <: Float                Idem (*)
______________(T-True) ______________________________________(T-Sub) _______________(???)
Γ > true : Bool        Γ > -8 : Float                                Γ > 9,0 : Float
__________________________________________________________________________________________(T-Rcd)  ______________________________________________________________(S-RcdWidth)
Γ > {l1 = true, l2 = −8, l3 = 9,0} : {l1 : Bool, l2 : Float, l3 : Float}                           {l1 : Bool, l2 : Float, l3 : Float} <: {l1 : Bool, l2 : Float}
______________________________________________________________________________________________________________________________________________________________________________(T-Sub)
Γ > {l1 = true, l2 = −8, l3 = 9,0} : {l1 : Bool, l2 : Float}



8) Mostrar que el término xx no es tipable en cálculo-λ clásico, pero sí es tipable al considerar las reglas de subtipado según lo visto. Exhibir contexto y tipo para este término.


Ya se mostró que no tipa en otra práctica.

                                                          x : τ → σ ∈ Γ
                                                          _____________(T-Var) __________(S-Top) => τ = Top => Top → σ <: Top vale por definición de Top. PREGUNTA: esto es horrible de nuevo ☹️
x : τ → σ ∈ Γ  => µ = τ → σ                               Γ > x : τ → σ        τ → σ <: τ 
______________(T-Var)                                     ____________________________________(T-Sub)
Γ > x : τ → σ                                             Γ > x : τ   
______________________________________________________________________________________________________________________________________(T-App)
Γ > xx : σ

Γ = {x : µ}

Entonces Γ = {x : Top → σ} > xx : σ



9) En este ejercicio trabajaremos con los tipos Bool <: Nat <: Int <: Float, funciones y registros.

Puede asumirse que Float tiene la operación +, que Int tiene además las operaciones pred y suc, y que Bool cuenta también con la operación if, con las reglas de tipado habituales:

                                                Γ > M : Int
                                                ________________(T-Suc)
                                                Γ > suc(M) : Int


                                                Γ > M : Int
                                                __________________(T-Pred)
                                                Γ > pred(M) : Int


                                                Γ > M : Float  Γ > N : Float
                                                ____________________________(T-+)
                                                Γ > M + N : Float


                                                Γ > M : Bool  Γ > N : σ  Γ > O : σ
                                                ___________________________________(T-If)
                                                Γ > if M then N else O : σ


a) Suponer que la regla de subtipado para funciones fuera contravariante en el argumento y en el resultado, es decir:

S <: T  U <: V
______________(S-Arrow')
T → V <: S → U

Mostrar que esto no sería una buena idea:

- Dar una expresión M del cálculo lambda.
- Explicar brevemente por qué no tiene sentido evaluar M.
- Demostrar que, sin embargo, M tiene tipo.


M = PENSAR





REGLA CORRECTA

S1 <: T1  T2 <: S2
__________________(S-Func)
T1 → T2 <: S1 → S2



b) Suponer ahora que la regla de subtipado para funciones fuera covariante en el argumento y en el resultado es decir:

S <: T  U <: V
_______________(S-Arrow'')
S → U <: T → V



M = (λf : Int → Bool. f 2) (λx : Bool. if x then true else false)


No tiene sentido reducir esto ya que le estoy pasando, a la primera lambda, una función con un tipo de dominio más restrictivo que el que espera que tenga. Así, es posible que queden fuera valores que deberían ser válidos. Por ejemplo, no tiene sentido evaluar f 2 cuando f : Bool → Bool. Sin embargo tipa:


                                        ______________________________(T-Zero)  __________(S-NatInt)
                                        Γ ∪ {f : Int → Bool} > 0 : Nat          Nat <: Int
                                        ________________________________________________________________(T-Sub)
=> τ → σ = Int → Bool                   Γ ∪ {f : Int → Bool} > 0 : Int
                                        _______________________________________________________________________(T-Suc)
f : τ → σ ∈ Γ ∪ {f : Int → Bool}        Γ ∪ {f : Int → Bool} > 1 : Int
________________________________(T-Var) ______________________________________________________________________________(T-Suc)   
Γ ∪ {f : Int → Bool} > f : τ → σ        Γ ∪ {f : Int → Bool} > 2 : Int          
_____________________________________________________________________________________________________________________________(T-App)   
Γ ∪ {f : Int → Bool} > f 2 : σ                                                 
____________________________________________________________________________________________________________________________________(T-Abs) 
Γ > λf : Int → Bool. f 2 : (Int → Bool) → σ                                                                                                                              (1)
________________________________________________________________________________________________________________________________________________________________________________________(T-App)
Γ > (λf : Int → Bool. f 2) (λx : Bool. if x then true else false) : σ





(1)

x : Bool ∈ Γ ∪ {x : Bool}
_________________________(T-Var)  ____________________________(T-True)  _____________________________(T-False)
Γ ∪ {x : Bool} > x : Bool         Γ ∪ {x : Bool} > True : Bool          Γ ∪ {x : Bool} > False : Bool
_______________________________________________________________________________________________________________(T-Abs) _________________________(S-Arrow'')
Γ > λx : Bool. if x then true else false : Bool → Bool                                                                 Bool → Bool <: Int → Bool
____________________________________________________________________________________________________________________________________________________________________(T-Sub)
Γ > λx : Bool. if x then true else false : Int → Bool



10)

a) Suponer que el operador Ref es covariante. Escribir un programa (en un lenguaje a elección) que arroje error/excepción a causa de esto.


b) Hacer lo mismo pero suponiendo que el operador Ref es contravariante.


Ejemplos, en cálculo lambda, para ambos casos en la teórica.



11) Supongamos que agregamos al lenguaje el tipo Comp_σ, para representar comparadores de términos de tipo σ. Los comparadores tienen la operación mejorSegún, que indica si el primer término es mejor que el segundo.

                                            Γ > M : Comp_σ   Γ > N : σ   Γ > O : σ
                                            _______________________________________(T-Comp)
                                            Γ > mejorSegún(M, N, O) : Bool

a) El siguente término: λc : Comp_{x:Int}.mejorSegún(c, {x = 1, y = 2}, {x = 0})

¿Debería ser tipable, en términos del principio de sustitutividad? ¿Lo es? En caso afirmativo, dar una derivación que lo pruebe. Pueden asumirse como axiomas:

                                            Γ > {x = 1, y = 2} : {x : Int, y : Int}         Γ > {x = 0} : {x : Int}
                               

                                                AXIOMA                                                                                      AXIOMA
                               _______________________________________(T-Rcd) ______________________________(T-RcdWidth)          ________________________(T-Sub)
c : Comp_{x : Int} ∈ Γ'        Γ' > {x = 1, y = 2} : {x : Int, y : Int}       {x : Int, y : Int} <: {x : Int}                     Γ' > 0 : Int
_______________________(T-Var) ___________________________________________________________________________________________(T-Sub) _______________________________(T-Rcd)  
Γ' > c : Comp_{x : Int}        Γ' > {x = 1, y = 2} : {x : Int}                                                                    Γ' > {x = 0} : {x : Int}    
________________________________________________________________________________________________________________________________________________________________________(T-Comp) => τ = Bool
Γ' > mejorSegún{c. {x = 1, y = 2}, {x = 0}} : τ
________________________________________________________________________________________________________________________________________________________________________________________(T-Abs)
Γ > λc : Comp_{x:Int}.mejorSegún(c, {x = 1, y = 2}, {x = 0}) : Comp_{x:Int} → τ

Γ' = Γ ∪ {c : Comp_{x:Int}}

PREGUNTA: es correcto el paso de aplicación de T-Comp? resolví el tipo {x : Int} como el menos restrictivo entre todos los candidatos 🤔️

b) Dar la o las reglas de subtipado para comparadores.


σ <: τ 
________________(S-Comp) => Si quiero poder reemplazar Comp_σ por Comp_τ en cualquier contexto sin problemas, entonces Comp_τ debe ser, por lo menos, tan general como Comp_σ. Por ejemplo, si 
Comp_τ <: Comp_σ            σ = Nat, quisiera que τ sea supertipo de Nat para poder manejar todas las comparaciones entre Nats y tal vez alguna entre Ints.


c) El siguiente término: λc : Comp_Float.(λx: Comp_Nat.mejorSegún(x, 3, 4)) c

¿Debería ser tipable, en términos del principio de sustitutividad? ¿Según las reglas dadas, lo es? En caso afirmativo, dar una derivación que lo pruebe. Pueden asumirse como axiomas:

                                           Γ > 3 : Nat         Γ > 4 : Nat


x : Comp_Nat ∈ Γ''          AXIOMA          AXIOMA
___________________(T-Var) _____________   _____________                            
Γ'' > x : Comp_Nat         Γ'' > 3 : Nat   Γ'' > 4 : Nat                               c : Comp_Float ∈ Γ'         Nat <: Float
_________________________________________________________(T-Comp) => σ = Bool          ___________________(T-Var)  ______________________(S-Comp)    
 > mejorSegún(x, 3, 4) : σ                                                             Γ' > c : Comp_Float         Comp_Float <: Comp_Nat 
______________________________________________________________________________(T-Abs)  _______________________________________________________________(T-Sub)
Γ' > λx: Comp_Nat.mejorSegún(x, 3, 4) : Comp_Nat → σ                                   Γ' > c : Comp_Nat
___________________________________________________________________________________________________________________________________________________________________(T-App)
Γ' > (λx: Comp_Nat.mejorSegún(x, 3, 4)) c : σ
__________________________________________________________________________________________________________________________________________________________________________(T-Abs)
Γ > λc : Comp_Float.(λx: Comp_Nat.mejorSegún(x, 3, 4)) c : Comp_Float → σ


Γ' = Γ ∪ {c : Comp_Float}
Γ'' = Γ' ∪ {x : Comp_Nat}



12)



13)



14) Considerar un tipo Animal, más una jerarquía de subtipos que (por brevedad) limitaremos aquí a Vaca y León, más un tipo paramétrico AlimentoPara(σ) que identifica valores que pueden ser ingeridos por todos los de tipo σ.

Además de las T-Sub y S-Trans usuales se han definido estas reglas de tipado y de subtipado:

                                                                                                                                            Γ > M : σ   Γ > N : AlimentoPara(σ)
_____________________(T-Clara)         ______________(S-León)       ______________(S-Vaca)      _________________________(S-VacaLeón)       ___________________________________(T-Comer) 
Γ > Clarabelle : Vaca                  León <: Animal               Vaca <: Animal              Vaca <: AlimentoPara(León)                  Γ > comer(M, N) : σ



a) Suponer que alguien nos propone incorporar la siguiente regla de subtipado:


σ <: σ'
__________________________________(S-Alim)
AlimentoPara(σ) <: AlimentoPara(σ')


_____________________________________________________________________
                                                                     |
                  León <: Animal                                     |                  
                                                                     |
                  Vaca <: Animal                                     |
                                                                     |
                  Vaca <: AlimentoPara(León)                         |
                                                                     |
    AlimentoPara(León) <: AlimentoPara(Animal)                       |
                                                                     |
    AlimentoPara(Vaca) <: AlimentoPara(Animal)                       |
_____________________________________________________________________|


Argumentar que no es buena idea mostrando que, con esta regla, Clarabelle se come a sí misma. Es decir, dar una derivación que pruebe que el término comer(Clarabelle, Clarabelle) resultaría tipable.

Sugerencia: notar que el cálculo pretende capturar cierta noción de cadenas alimentarias (quién come a quién). Antes de hacer cuentas, pensar cómo lo intenta, y por qué. Imaginar la misma idea en contextos con fauna más diversa también puede ser útil para comprender las ventajas y detectar los problemas del enfoque.
                             

                                                       _____________________(T-Clara) _________________________(S-VacaLeón)         ______________(S-León)
                                                       Γ > Clarabelle : Vaca          Vaca <: AlimentoPara(León)                    León <: Animal
_____________________(T-Clara) ______________(S-Vaca)  _____________________________________________________________________(T-Sub) _________________________________________(S-Alim)
Γ > Clarabelle : Vaca          Vaca <: Animal          Γ > Clarabelle : AlimentoPara(León)                                          AlimentoPara(León) <: AlimentoPara(Animal)        
______________________________________________(T-Sub)  ______________________________________________________________________________________________________________________________(T-Sub)   
Γ > Clarabelle : Animal                                Γ > Clarabelle : AlimentoPara(Animal)  
______________________________________________________________________________________________________________________________________________________________________________________(T-Comer)
Γ > comer(Clarabelle, Clarabelle) : Animal


b)  Informalmente, el conjunto de valores de tipo AlimentoPara(σ) es el caracterizado por la propiedad:

                            y ∈ AlimentoPara(σ) ⇔ ∀x ∈ σ . x puede comer y

Sin embargo, el problema que ilustra el punto a) es que la regla permite que las vacas coman alimento para leones. Proponer una nueva versión de S-Alim. Explicar brevemente por qué tiene más sentido que la original.

Idea:

Si AlimentoPara(σ) es subtipo de AlimentoPara(σ') e y ∈ AlimentoPara(σ), entonces cualquier integrante del tipo σ' debe poder comerse a y. 

En términos de σ' y σ, esto requiere que σ'<:σ. Por ejemplo:


Si AlimentoPara(Felino) es subtipo de AlimentoPara(Tigre) e y ∈ AlimentoPar(Felino), entonces cualquier integrante del tipo Tigre debe poder comerse a y.

El enunciado que aparece arriba, tiene mucho sentido ya que cualquier tigre puede comer algo que sea comida de cualquier felino. En cierto modo, el alimento para Felino debe incluir todos los alimentos de los distintos subtipos de felinos que hay. Es decir, el alimento para Felino está constituido por la unión de los alimentos para todos sus subtipos. Por ello tiene sentido que AlimentoPara(Felino) subtipe de AlimentoPara(σ), donde σ <: Felino. 

=> NO, esto rompe con y ∈ AlimentoPara(σ) ⇔ ∀x ∈ σ . x puede comer y. Tomando σ como Felino y ∈ AlimentoPara(León) y algún x Tigre, se tiene que no necesariamente vale que x come a y

Esto es similar a lo que ocurre con los registros donde {} es el más general y a medida que se agregan campos se obtienen subtipos. Acá AlimentoPara(Tigre) es uno de los más generales (junto con todas las hojas) y a medida que se avanza hacia la raíz del árbol se agregan alimentos.

{vegetales, ciervo, pavo} 
Tigre----
         |     {vegetales, ciervo}
          ---- Felino  ---------
         |                      |
León-----                       |
{vegetales, ciervo, mono}       |        {vegetales}
                                 ------- Animal 
{vegetales, pasto, grano}       |
Vaca -----                      |
          |    {vegetales,pasto}|
           ----Rumiante --------
          |
Ciervo ---
{vegetales, pasto, raíces}


Esto parece indicar que la idea planteada por el enunciado es correcta => ???????????????????? kernel panic 😫️





16)













